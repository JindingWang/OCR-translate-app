package com.example.wangjd7.ocrtranslate;

import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ImageView;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Stack;

class Point{
    int x;
    int y;
    public Point(int i, int j) {
        this.x = i;
        this.y = j;
    }
    public void setPoint(int i, int j){
        this.x = i;
        this.y = j;
    }
    public int getX(){
        return x;
    }
    public int getY(){
        return y;
    }
}

class Rect{
    int x1; int y1; int x2; int y2;
    public Rect(int i, int j, int k, int l) {
        x1 = i; y1 = j; x2 = k; y2 = l;
    }
    public void setRect(int i, int j, int k, int l){
        x1 = i; y1 = j; x2 = k; y2 = l;
    }
    public int getx1(){
        return x1;
    }
    public int gety1(){
        return y1;
    }
    public int getx2(){
        return x2;
    }
    public int gety2(){
        return y2;
    }
}

public class PictureActivity extends AppCompatActivity {
    private static final int ALTER_PHOTO = 100;
    private int width;
    private int height;
    private int rotateCount = 0;
    private ImageView imageView;
    private Bitmap resizedBitmap = null;
    private Uri imageUri = null;
    private Uri imageUriCopy = null;
    private String mFilePath = Environment.getExternalStorageDirectory().getPath() + "/" + "temp2.jpg";
    String english;
    double w1[][] = {{1.485330,-0.737851,-0.463002,-0.984563,-0.328370,-1.069355,-0.797998,-0.262986,-0.067260,0.762669,-1.142011,-0.487279,0.772922,0.604783,-0.000381,0.124150,0.556980,0.543422,0.226190,0.961934,0.602359,-0.444458,0.727102,-0.156377,-1.517811,-0.026636,0.688711,0.495459,-0.531027,-0.580901,-0.691473,2.543175,-1.914802,1.266347,0.361490,1.817509,-2.114791,-0.284378,0.496763,-1.532570,1.225308,1.072581,0.748654,-1.644121,-0.041063,0.725247,-0.557447,-1.009321,1.937906},{-0.827063,-0.014808,-0.134957,0.425558,-0.071674,-0.174841,-0.468847,0.032532,1.166725,-0.508950,0.057397,-0.125983,0.718513,0.458554,-0.069308,0.269332,0.088806,0.355249,-0.558333,-0.671675,-0.479651,-0.458079,0.369713,0.359438,0.093552,-0.179434,-0.028180,-0.267402,-0.406456,0.436105,0.394085,-0.697271,0.042810,0.362292,-0.187453,-0.221118,0.029309,-0.233987,0.676746,-0.108514,-0.294264,0.031391,0.193512,0.120378,-0.497337,-0.053776,-0.302584,-0.200696,-0.798533},{-0.317095,-0.033268,-0.006599,-0.003241,0.054252,0.113261,-0.032899,-0.318553,0.092764,0.187969,0.284332,0.137219,0.036517,0.252515,0.033378,-0.114884,0.025185,-0.074694,-0.185514,0.204687,-0.392288,-0.002473,0.079201,0.211728,-0.415164,-1.071766,-0.665876,-0.019741,-0.192802,-0.079870,0.122667,-0.028746,-0.415546,-0.231714,0.154916,-0.158288,-0.092292,0.153174,0.261576,-0.471884,-0.264376,-0.488276,0.126446,-0.104172,-0.110178,-0.097270,-0.149424,-0.803203,0.895002},{0.288323,0.058109,-0.052441,-0.071427,0.073204,0.078559,-0.030420,0.357483,0.146452,0.297999,0.068559,0.123144,0.072635,0.005390,-0.029483,-0.074652,-0.137612,0.014725,0.008942,-0.100288,-0.171038,-0.050006,-0.212290,-0.096417,-0.090376,-0.327461,0.264153,0.051207,-0.052650,0.070397,0.072620,1.381438,0.474750,0.632744,0.515968,0.145821,0.079616,-0.024330,-0.023379,-0.034242,-0.226623,-0.100091,-0.159467,-0.049947,-0.177156,-0.167281,-0.102055,0.054352,-0.094469},{0.436084,-0.943702,-0.538600,-0.165321,0.330832,0.451648,0.127445,0.424928,-0.565035,0.116676,0.055041,0.046140,-0.230941,-0.394239,0.293936,-0.241061,0.245464,0.283946,-0.022726,0.225599,-0.136821,-0.366669,-0.093783,0.199090,-0.055523,-0.679392,-0.200359,0.291397,-0.488168,-0.431468,-0.069456,-0.017157,-0.683140,-0.298126,-0.063176,-0.401194,-0.628258,-0.431949,-0.036990,-0.130785,-0.198297,-0.295538,0.082511,-0.047738,0.111644,-0.128589,0.234154,-0.344534,0.566212},{0.118696,0.082409,0.100089,0.129809,0.137038,0.007620,-0.226954,-0.158231,-0.152978,-0.066448,0.043390,0.150421,-0.006979,0.237852,0.055667,-0.185888,-0.245566,-0.269747,0.077859,0.307398,0.105155,0.041820,0.072612,0.058012,-0.216184,0.081874,0.203751,0.143943,-0.350740,-0.108414,0.203328,-0.127365,-0.145733,0.090738,-0.766180,-0.238918,0.043081,-0.098724,-0.084334,-0.350813,-1.563447,-0.752865,-0.028386,-0.086796,-0.034024,-0.259519,-0.609076,-0.866495,-0.007319},{0.092136,0.224174,0.138526,-0.300576,-0.122457,0.043622,-0.124059,0.274768,0.067855,0.065485,-0.116182,0.007080,-0.038427,-0.035586,0.084293,-0.019498,-0.061337,-0.131040,0.021385,0.080881,0.038151,0.092201,0.130053,-0.126787,-0.106524,-0.136590,-0.310137,-0.562950,-0.143269,-0.097093,0.064408,0.027564,0.116991,-0.160168,-0.343678,-0.234736,0.013643,0.261603,0.148423,0.066798,-0.991680,-1.038149,0.079404,-0.091687,-0.278739,-0.045709,-0.177254,-1.690132,-0.699682},{0.198396,-0.412322,0.079463,0.486685,-0.062012,-0.170654,0.413791,0.447541,-0.531360,0.632208,-0.762177,-0.281195,0.278763,-0.463613,0.521820,-0.582594,0.725899,0.483117,0.249283,-0.187422,-0.004976,0.388406,0.531904,-0.143447,-0.415589,-0.113541,-0.230356,0.222199,-0.216231,0.084530,0.755703,0.400306,1.167663,-0.145308,0.298532,-0.529693,-0.676280,-0.480632,-0.150944,-0.672576,-0.091362,0.289076,0.711864,0.331662,0.536180,0.621908,-0.074219,0.031237,0.037150},{0.397799,0.006526,-0.188881,0.101820,-0.061675,-0.231412,-0.105321,-0.419726,-0.825694,-0.179046,-0.048154,-0.030339,-0.019161,-0.699865,0.193221,-0.264467,-0.347252,-0.030473,0.097720,-0.147584,0.019482,-0.481902,-1.127887,-0.906894,-0.402903,-0.017851,0.089326,-0.070719,0.221855,0.193838,-0.257409,0.246143,-0.013241,0.228116,-0.446537,-0.143927,0.006873,0.033987,0.073541,0.237810,0.102721,-0.643398,0.167097,0.107062,0.110849,-0.088152,-0.166096,-0.434661,-0.162945},{-0.270878,-0.138102,0.204813,0.256862,0.077947,0.015068,-0.353264,0.693165,0.232742,0.139230,-0.446181,0.555022,0.138914,0.477382,0.369718,0.401919,0.564044,0.081079,-0.069802,-0.147590,0.262662,-0.218506,-0.025487,-0.057938,0.314959,-0.761038,-0.175230,-0.221552,-0.483172,-0.138588,0.187826,0.359741,0.466334,0.392779,-0.373947,-0.116590,0.477905,-0.308260,0.552178,-0.513779,-0.170548,0.095353,0.339216,-0.227748,0.070985,1.211752,-0.467909,-0.348737,-0.273651},{0.124040,0.087478,-0.182407,-0.248557,-0.161921,-0.240624,0.155202,-0.121633,-0.187228,-0.065466,0.022198,-0.366041,-0.044526,-0.226445,0.177331,0.089416,0.121269,-0.367071,0.154178,0.277553,-0.154972,-0.220380,0.023299,0.198189,-0.020894,0.106054,0.070939,0.288925,-0.296886,-0.167918,-0.355243,-1.907206,-0.094224,0.061300,-0.028027,0.021025,-0.040005,0.341940,-0.648947,0.278725,-0.141969,-0.069902,-0.023771,0.040172,-0.189144,-0.722967,0.181586,0.232281,0.165414},{0.589503,-0.745057,-0.895619,-0.058436,0.093032,0.247736,0.499911,-0.165029,-0.549629,-0.172123,-0.070527,0.154005,-0.213010,-0.364783,0.237921,-0.276001,0.711864,0.484340,0.031106,0.238567,-0.429090,0.376268,-0.190108,-0.278429,-0.179912,-0.217728,0.150749,0.125205,0.256778,0.058013,0.044830,-0.340939,-0.156151,-0.160491,0.395049,0.012217,-0.019219,0.388164,-0.431791,0.050466,-0.815773,0.359320,-0.114347,-0.177227,0.018116,-0.271188,-0.201582,0.378535,0.719416},{-1.950974,-0.422751,-0.061144,-0.015060,-0.019771,0.024968,0.054350,0.061997,-0.006347,-0.104841,-0.085072,0.095111,0.149031,-0.037724,0.183512,0.120816,0.144771,-0.360541,-0.322704,-0.514559,-0.245182,0.074521,0.051001,-0.109118,-0.333933,-0.030347,0.139920,-0.065600,-0.165476,-0.016279,0.123265,0.083171,0.181533,0.087066,0.116659,0.166795,-0.059045,-0.102408,-0.100128,-0.047796,-0.046521,0.035399,-0.085344,-0.094968,0.079139,0.202436,-0.018621,0.022639,-0.061346},{-0.058018,-0.087315,-0.112341,0.211525,0.171098,-0.037945,0.027978,-0.192781,-0.061640,-0.090685,0.019564,-0.095057,0.014882,0.250576,-0.033487,-0.138254,-0.158836,-0.102929,-0.089010,-0.128988,0.545265,-0.196260,0.227940,-0.180995,-0.072789,0.088360,0.797165,0.185480,1.182656,0.415357,0.394478,0.040561,0.134517,0.923203,0.344627,-0.044352,-0.018085,0.081820,0.213310,0.259158,0.934166,0.377379,-0.170702,-0.040805,-0.000282,-0.002121,0.021460,1.118888,-0.231656},{1.242241,0.395166,0.232006,-0.110677,-0.015552,-0.114749,0.031720,0.485699,-0.167753,0.055091,0.249484,-0.085364,0.073687,0.102380,-0.246077,0.048840,-0.132897,0.461693,0.088161,0.213852,0.725095,-0.109840,0.050934,0.121611,0.150034,0.219429,0.021209,-0.263422,0.067794,-0.048701,-0.256168,-0.273153,-0.108602,-0.098109,-0.124232,-0.062956,-0.015250,0.283857,0.046590,-0.165963,-0.137455,-0.262829,-0.028807,0.015549,-0.377537,-0.033407,0.096374,-0.038189,0.309194},{-0.162994,-0.318881,0.033125,0.160127,0.254656,0.083929,-0.223716,0.255851,-0.391642,-0.432416,-0.452959,-0.339830,-0.529243,-0.635021,0.511149,-0.245124,-0.235885,0.021386,-0.531807,-0.662927,0.365539,-0.021548,-0.191234,0.067943,-0.077558,0.001187,-0.609840,0.187593,-0.377265,0.320524,-0.063837,0.246891,-0.200642,-0.429835,-0.333479,-0.137610,-0.562905,0.216152,0.225114,0.133044,-0.354663,-0.610462,0.207435,0.123502,0.287320,0.138905,-0.034587,-0.059460,0.796727},{0.128222,0.107296,0.039624,0.000596,-0.078394,-0.221905,-0.243443,-0.320041,-0.061888,-0.124630,0.049135,-0.140843,-0.166527,0.176522,-0.180832,-0.306963,-0.026223,0.001301,0.220072,0.163115,-0.061059,0.320366,0.150197,0.128115,0.009716,0.290780,-0.239944,-0.384931,-0.533381,0.075568,-0.069303,-0.735410,-0.186950,0.591331,0.400797,-0.045627,-0.143995,-0.034921,-0.014927,-0.092690,-0.072751,0.352932,0.104812,0.119845,0.215024,0.116126,-0.020180,-0.383021,-1.701706},{-0.139198,-0.057329,-0.021727,0.098728,-0.013907,0.004976,-0.060631,0.051513,0.141483,0.002575,-0.177024,0.177472,0.041948,-0.010423,-0.404466,-0.103752,-0.200056,-0.057847,0.256334,0.197630,-0.946906,0.374972,-1.009074,-0.323275,0.066917,-0.132859,-1.139615,-0.146019,-0.632001,0.113771,0.143570,-0.188719,-0.409549,0.049662,0.100649,0.047462,-0.003282,0.034604,-0.006392,0.065976,0.026267,0.012524,-0.050456,0.008757,-0.004052,0.024308,0.085152,0.012747,0.115793},{0.206060,-0.357444,-0.148344,-0.263868,-0.094655,-0.537890,0.383633,-0.248619,-0.238778,-0.501289,0.033289,0.501541,-0.577456,-0.264526,0.085593,0.337920,-0.375870,-0.186573,-0.096979,-0.558857,-0.101953,-0.587162,-0.326468,0.267812,0.257190,-0.057248,-0.524197,-0.207271,-0.261560,0.552338,-0.275785,0.045997,-0.554404,-0.111208,-0.112330,-0.640530,-0.246631,0.229773,0.134267,-0.250795,0.378045,0.564327,-0.443189,-0.117254,0.024978,0.233382,-0.260015,0.546760,0.267187},{-0.164625,-0.296678,0.015034,0.152992,0.006813,0.311879,0.464297,-0.152438,0.864786,0.940941,0.749921,-0.301501,-0.389498,-0.143630,0.132754,0.156134,-0.451786,0.054150,0.139554,0.175886,-0.262619,0.424317,-0.163369,-0.219567,0.843579,-0.133128,-0.146789,-0.828056,0.075665,-0.470560,-0.030493,0.697819,0.154778,0.091766,0.011342,0.075066,0.077776,0.194005,-0.121550,-0.332294,-0.042105,0.705353,-0.248304,-0.386608,-0.034088,-0.222599,-0.181348,-0.003516,1.537479},{1.676670,0.316089,-0.053281,-0.146736,-0.073489,-0.090781,-0.030827,-0.115997,0.141419,-0.001288,0.090168,0.105547,-0.048106,0.068116,0.008905,-0.052071,0.185382,0.448317,-0.212367,-0.036433,-0.226057,-0.186345,-0.140876,-0.137496,0.286939,0.049434,-0.039429,-0.029641,0.096364,0.123753,0.151971,0.005847,-0.027773,0.076484,0.028798,-0.010860,0.156301,0.116861,-0.145010,-0.094322,0.020271,0.239845,1.564611,0.325758,0.260001,-0.045380,-0.017376,-0.121561,-0.344965},{-0.206701,-0.253527,-0.200346,1.133282,0.246999,-0.085680,-0.304968,-0.311991,-0.361189,-0.605493,1.486473,0.052133,0.052791,0.176036,0.506070,0.248749,-0.323341,1.740235,-0.329923,-0.070551,0.590967,0.542748,-0.116798,0.581604,1.769917,0.078669,-0.230423,-0.170266,-0.892351,-0.159499,0.307716,0.754842,0.045442,0.212023,-0.098276,0.035502,0.108400,0.192142,-0.004691,-0.199219,-0.431969,-0.257794,0.034109,0.423454,-0.379625,0.215098,-0.023126,0.369282,-0.108743},{-0.072537,-0.081576,0.175564,-0.242567,-0.294639,-0.281833,-0.281057,0.056407,0.017706,-0.268479,0.043495,-0.361671,-0.548389,-0.005249,0.095615,-0.233986,-0.072519,0.214312,-0.685266,-0.639167,-0.860627,-0.407807,-0.106419,-0.021385,-0.135999,-0.815699,-0.250500,0.649828,-0.252360,0.318786,0.006088,-0.052904,0.068285,-0.250312,-0.076852,0.322379,-0.260102,0.093378,-0.133557,0.072521,0.174019,0.244984,-0.134721,0.248500,0.283885,0.077061,0.141744,0.007442,0.140883},{-0.916120,0.454752,0.097853,0.619322,-0.771238,0.050888,-0.147983,1.202068,0.035722,-1.380811,0.416773,-0.901591,-0.358374,0.865836,0.591807,0.397164,-1.049598,1.055252,-0.507406,-0.639460,0.321473,0.153321,0.635321,0.254467,0.221706,0.106211,-0.002290,-0.125376,0.229513,0.979018,0.659352,-0.084125,0.819501,-0.357809,-0.781618,-0.022898,-0.133736,0.265629,0.252280,0.089843,-0.239065,-0.364730,0.214230,-1.671202,0.507357,-1.307715,0.571531,-0.796167,0.474705},{-1.186466,0.029420,-0.109614,-0.210128,0.154739,0.496820,-1.298433,0.971668,0.918408,-0.071635,-0.470129,-0.155079,0.144890,0.018969,-0.169947,-0.249434,-0.029011,-0.229207,-0.001130,0.116943,0.639392,-0.020643,-0.380944,0.459412,0.540721,0.448142,-0.225511,-0.613548,-0.248136,-0.469801,-0.147352,-0.052772,0.389161,0.066350,-1.140160,-0.113788,0.672821,-0.519527,0.401695,0.087447,0.767983,-0.184526,-0.506441,0.412182,0.292094,-0.237550,-0.600097,0.334279,-0.952222},{-0.472488,0.272008,0.665407,-0.652594,-0.125025,0.994948,-0.428516,-0.043440,0.824712,0.046682,-0.020475,-0.240461,0.511168,0.710906,-0.224423,0.342161,0.707164,-0.566501,-0.146669,0.147647,-0.582278,0.076525,-0.597867,0.512559,-0.034114,0.540052,-0.267576,-0.099435,0.324754,-0.098375,0.164901,-0.088662,0.601742,-0.208405,-0.064276,-0.014744,0.758971,-0.458108,-0.032894,-0.104751,0.448662,-0.182353,-0.455077,0.806587,-0.015860,0.530171,-0.465053,-0.413826,-1.477433},{-0.257121,-0.346070,-0.211518,0.262415,-0.000556,0.077464,0.043024,-0.145484,0.046810,-0.173450,0.084322,0.101709,0.093782,0.069582,0.022068,-0.070050,-0.192310,-0.774148,0.115895,-0.059758,-0.105990,0.084566,0.237821,0.199163,-1.118576,-1.264054,-1.153535,-0.954171,-0.031457,0.010135,0.014440,-0.021078,-0.235256,-0.060037,0.060420,0.090249,-0.054309,-0.168297,0.060443,0.004345,-0.058165,0.058085,-0.158694,-0.225774,0.123228,0.122389,-0.092885,-0.006097,-0.220039},{0.143360,-0.092759,0.037110,0.088302,0.031873,0.144731,0.047270,0.108677,-0.098271,-0.030452,-0.083252,-0.063057,-0.097233,0.095892,0.097301,-0.262521,0.078172,-0.076206,0.001982,-0.106040,-0.053495,0.972989,2.463955,0.305585,-0.310693,0.252485,1.552032,0.310002,-0.087179,-0.107342,-0.126084,-0.112710,-0.343783,0.059004,0.484369,0.018211,0.080745,0.131796,0.033875,-0.105483,0.051399,-0.226110,-0.014757,-0.164513,0.209631,0.229251,-0.177689,0.103057,-0.187401},{0.684128,-0.173839,0.221038,0.023603,0.446108,0.271517,-0.493989,0.578296,0.209896,0.159991,0.456259,-0.293270,-0.686247,-0.053559,0.038518,0.499820,0.026246,0.028951,-0.205236,0.115711,0.314037,-0.050535,0.475997,0.228921,0.230623,0.037638,0.243916,0.202001,-0.309340,-0.452196,-0.395557,-0.744155,0.240704,-0.204060,0.130086,-0.269676,0.005888,0.265902,-0.410473,-0.380500,-0.082944,0.509810,0.356352,-0.963768,-0.215973,-0.357009,0.246797,0.121988,0.402176},{-0.211249,-1.181766,-0.161633,0.493458,0.808108,-0.298911,-0.575290,0.014052,-0.012825,-0.245673,0.469091,0.285625,-0.164913,-0.462879,-0.148155,-0.466869,0.286465,-0.784578,-0.005292,0.351264,0.782489,0.506726,0.704544,-0.581831,-1.719177,-0.227282,0.971979,0.648854,0.358107,-0.169699,-0.331550,-1.062024,0.221584,0.065714,0.755725,0.348293,-0.522028,-0.221135,-0.719374,-0.352661,-0.302697,-0.079109,-1.781259,-0.050468,0.586941,-0.072929,-0.192956,-1.021396,-0.770635},{-0.017860,0.541581,0.082737,-0.011782,-0.149916,-0.216185,0.152044,0.191317,0.089818,0.211233,0.520214,0.126459,-0.280171,-0.164200,0.342642,-0.157026,-0.205291,0.375496,0.290427,0.208333,0.005231,-0.392358,-0.934861,-0.084973,-0.426637,-0.649286,-0.812968,-0.159106,-0.432964,0.417114,-0.000471,-0.097196,-0.007080,-0.675414,-0.089396,-1.002521,-0.033780,0.062006,-0.177497,-0.158480,-0.121027,-0.350119,-0.354097,-0.205084,-0.097300,0.147667,0.006220,-0.149771,0.057608},{-0.701839,-0.005921,-0.068076,0.058881,0.045476,0.014868,0.195757,-0.362675,0.100053,-0.040414,-0.042190,-0.299897,-0.111311,0.315541,0.259243,0.006586,0.280218,0.250559,-0.110387,-0.395678,-1.119836,-0.246183,0.343691,0.279619,0.016181,0.179854,0.216600,0.046363,-0.619338,-0.426500,-0.267761,-0.155365,0.128346,-0.087702,-0.179505,0.034591,0.005278,0.049954,-0.179912,-1.641423,-0.393647,-0.081733,-0.210075,-0.103548,-0.027061,0.115934,-0.714388,-0.687888,0.648460},{-0.651048,-0.228178,0.026926,0.025988,-0.023285,0.056982,0.010921,-0.236236,-0.047864,-0.169480,0.049758,0.044641,0.103596,-0.010254,0.370973,0.273300,0.286464,-0.058967,-0.273901,-0.235755,-0.350673,-1.464482,-0.332251,-0.178272,0.227045,0.147052,0.036675,0.494250,0.287796,-0.130760,-0.316214,-0.084671,0.133819,0.077424,0.069049,-0.102598,-0.034101,-0.031404,-0.059425,0.021521,-0.087494,0.282791,-0.017836,0.008312,0.085471,-0.043301,-0.046554,-0.081478,-0.994636},{-1.426404,-0.196356,-0.054224,0.115888,-0.017753,-0.082131,-0.116334,0.229839,-0.037107,0.033164,-0.053523,0.000154,0.012962,-0.062543,-1.403910,-0.435797,-0.317784,-0.075324,0.059824,-0.113574,0.062378,-0.381330,-0.086893,0.089055,0.009043,-0.026082,0.076388,-0.063881,0.175445,0.182515,-0.202170,0.054979,0.167486,0.275651,-0.000992,0.004149,-0.045008,-0.013755,-0.104973,0.026271,0.152716,0.164552,-0.035503,0.159939,-0.079642,-0.082356,-0.063185,0.146241,0.147687},{-1.561352,-0.632310,-0.392132,0.076607,0.428774,0.583995,-0.948462,-0.263106,1.425288,-0.318410,-0.028414,-0.672200,0.791313,-0.035202,0.086908,0.719109,-0.671873,-0.156994,-0.704603,-0.127271,0.352139,0.115986,-0.114470,0.906882,0.494684,-0.495220,-0.166110,-0.506336,0.086456,-0.265457,0.505731,-0.266865,-0.188131,0.512911,-0.549709,0.871918,0.201755,-0.260880,0.175060,0.509937,-0.274297,-0.406193,-0.629481,-0.301498,-0.136527,-0.248875,0.019144,-0.373827,-1.045741},{0.167950,-0.005937,0.153760,0.384556,-0.014839,-0.215587,-0.243435,0.023731,-0.211137,-0.221797,0.053338,0.142062,0.177313,0.237813,-0.236628,0.263808,-0.135889,-0.524480,-0.398835,0.205182,0.552970,0.112250,-0.424893,0.175649,0.169697,-0.233712,-0.619511,-0.852941,-0.493702,0.186618,-0.091143,0.059750,-0.001006,0.107631,-0.757029,0.311599,-0.133761,-0.032728,-0.321931,0.335215,-0.018607,-0.122046,0.069298,-0.121015,0.143768,-1.107657,0.045596,0.369535,0.089342},{-0.060700,0.012065,0.140799,-0.040741,-0.011001,0.202634,-0.002344,-0.057649,-0.206428,-0.345700,-0.139685,-0.001315,-0.103854,-0.149231,0.080169,0.271625,-0.041693,-0.158377,0.124800,-0.026467,0.162968,-0.093486,-0.219833,0.137983,0.119467,0.197670,-0.172764,-0.086708,0.354625,0.090593,0.280131,0.077082,-0.127507,-0.142851,-0.122074,0.049125,0.136131,0.188763,0.186817,-0.066030,-0.046598,-0.004014,-0.131797,0.006707,0.014530,0.390602,-0.077233,-0.102654,-0.042699},{-0.128637,-0.098410,0.154157,0.189986,0.305085,0.099752,0.081084,0.034566,0.227869,0.138394,-0.024197,0.042983,0.078085,0.389242,0.581807,0.189287,-0.053371,0.118240,0.207210,0.158062,0.014511,-0.339511,-0.271120,-0.405653,-0.108812,-0.032748,0.268545,0.548706,0.046250,-0.041439,-0.058874,-0.180893,0.050666,0.427536,1.090603,0.021440,0.000460,0.112701,-0.127671,-0.147387,-0.221584,0.456483,-0.228830,-0.058879,-0.012186,0.236255,-0.216292,0.033689,0.171372},{0.359283,0.149785,0.520334,-0.172804,0.009227,-0.323609,-0.529634,-0.219990,-0.329256,0.234619,0.961170,0.536071,-0.451279,0.243931,-0.282183,-0.137241,-0.551294,-0.619298,-0.500305,0.091506,-0.619953,0.579157,0.113080,0.309731,-0.355653,0.324013,0.619545,-0.119544,0.620311,-0.546942,0.908623,0.502486,-0.075651,-0.266771,0.162442,0.597319,-0.425627,-0.229856,0.107243,0.229586,0.645544,0.412336,0.243542,-0.311262,0.241116,0.420920,-0.080193,-0.411866,0.422771},{0.660179,0.499557,-0.022079,-0.031690,0.009568,-0.021967,0.112677,-0.228237,0.165509,0.204739,-0.145047,-0.221909,0.186047,-0.067927,-0.023030,0.096861,0.512791,0.251701,-0.017887,0.304042,0.469462,0.508493,0.228694,0.077091,-0.554974,-0.224067,1.472501,0.515890,0.854129,-0.067169,-0.123196,-0.087274,0.493865,-0.399749,-0.130305,0.123479,0.029254,0.128768,0.092532,-0.019803,-0.106830,-0.194493,-0.305080,0.437900,0.029210,-0.208050,0.042653,-0.337741,-0.280577}};
    double w2[][] = {{-0.046833,0.297478,-0.297063,0.164431,-0.055401,-0.420267,-0.159484,0.472112,-0.741190,-4.241868,-1.588944,-1.246454,-0.427004,0.023766,-0.093999,0.018324,-0.568438,-0.386444,-0.177630,0.076400,0.248614,0.014732,-0.180412,-0.016352,-0.591428,0.570970,-0.001892,0.543204,-0.057198,-0.021568,-0.045767,-0.157875,-0.448694,5.547382,-0.069708,-0.474095,0.356662,0.194572,-0.371348,0.092966},{-0.076941,-0.162717,0.126920,0.641831,-0.420069,-0.709156,-0.444306,0.128203,-0.137733,1.574062,-1.788568,0.200936,0.414664,0.283607,0.914909,0.154208,9.330908,-0.608334,-0.421055,0.201679,0.569989,0.074173,-0.066527,-0.072670,0.106435,0.419617,-0.199370,0.260618,0.726955,-0.018864,-0.140490,-0.635670,-0.910698,-0.399617,-0.668300,-0.293546,0.260451,0.243273,0.276091,-0.567008},{-0.019992,-0.493182,-0.456447,0.169353,0.101137,-0.445045,-0.479494,-0.352457,0.000382,0.297145,-0.210039,-0.083951,0.261818,0.033061,1.585447,0.013201,-0.277286,-0.355910,-0.286344,0.032239,0.023864,0.026730,-0.489108,-0.016373,-0.453574,-0.442017,7.659358,0.228564,-0.496935,-0.028774,-0.105655,-0.161228,-0.144612,-0.143860,0.805874,-0.217513,0.208633,0.349207,-0.570813,0.156738},{-0.027889,0.257290,0.116270,0.419208,-0.049053,-0.132067,-0.401905,1.546357,-0.431624,-0.826951,-0.686179,1.015229,0.964770,0.086758,1.195563,0.146030,-0.711125,-0.364416,-0.794455,-1.073261,0.494335,0.065319,-0.381682,-0.055410,-0.345340,-0.364956,-0.315833,0.134680,0.853260,-0.100482,-0.262719,0.017591,-0.144658,-0.367829,-0.145364,-0.080640,0.323298,0.253278,-0.668373,-0.694897},{-0.057326,-0.501724,0.016373,-6.622760,0.345932,-0.633343,-0.477555,1.180202,0.165699,-0.047677,-0.275725,0.186610,-1.479696,0.078551,-0.715054,0.252162,-1.084286,-0.638497,-0.646482,0.073153,0.304120,0.051531,-1.677617,-0.051562,-0.335247,-0.753730,-1.268386,0.221243,1.209690,-0.025289,-0.110401,-1.506585,-0.430176,-0.534767,-0.393080,-0.418572,0.435128,0.277998,0.742482,0.195905},{-0.057164,-0.427653,-1.299046,0.216056,5.311227,-0.860990,-0.514646,-1.065540,-0.097229,0.370627,-0.346232,1.111908,-0.332368,0.947238,-0.146342,-0.826125,-0.403596,-0.190941,-0.420340,0.007348,0.160355,0.060261,-0.041373,-0.066163,0.260038,0.234690,-0.286929,0.167316,-1.129547,-0.049647,-0.654704,7.280041,-0.292395,-0.230616,0.833252,-0.467433,0.356031,0.327050,-0.356894,0.712344},{-0.055186,0.564451,-0.390478,0.598249,-0.854487,-0.470861,-0.673906,2.722051,-1.195530,-0.211901,-0.633640,0.859241,5.397367,0.297592,-6.234574,0.008922,-0.659013,-0.497738,0.367253,0.089637,1.649173,0.102629,-0.651536,-0.061102,-0.296907,-0.508194,-4.030236,0.153605,1.284825,-0.189814,0.035396,-0.208693,-1.137496,-0.500355,0.255135,-0.417990,0.460308,0.806538,1.144673,0.856745},{-0.049770,-0.246962,-0.343046,0.538235,-0.478690,-0.622047,-0.677999,-0.962872,0.151456,-2.615065,10.003573,-0.354540,-0.260071,0.216241,0.300169,-0.047441,-1.132874,-0.589854,-0.600064,0.099251,0.659440,0.153726,-0.349877,-0.101892,0.738509,-1.299544,-0.172463,0.322104,-0.215304,-0.046684,-0.075896,-0.435736,-0.415742,-0.405935,-0.249446,-0.799164,0.785483,0.467733,-0.318322,0.539924},{-0.053952,-0.391872,-0.012043,-0.063706,1.731648,0.078578,0.150821,-0.075441,-1.266379,0.563573,-0.030738,-0.853376,0.252321,-0.034202,0.426057,4.561532,0.224078,-1.008224,-1.640242,-0.005468,0.252055,0.003441,0.183661,-0.010850,-1.125900,1.381747,-0.000820,0.080219,0.130627,-0.016039,-0.600565,-0.713827,-0.036213,0.035941,0.778652,0.001377,0.158942,0.139932,-0.271866,-3.304501},{-0.004307,-0.028416,0.365069,-0.025131,-0.575077,-0.393798,-0.259614,-0.151284,10.833821,0.980018,0.055004,-0.625504,0.459138,0.013408,0.732056,-0.707526,-0.288682,0.272055,-0.346083,0.010418,0.153174,0.004572,0.121278,-0.006497,-0.067265,0.056213,-0.295327,0.262793,-0.547369,-0.016071,-0.217531,-0.096040,-0.206272,-0.109598,0.692039,-0.332989,0.296848,0.090356,-0.782732,1.270324},{-0.022967,0.520939,-0.027526,0.341748,0.064541,-0.396382,-0.133326,-0.051132,-0.058188,0.149229,-0.481188,-0.614213,-0.491000,0.703889,-0.115887,-0.055942,0.000695,0.123127,-0.271356,0.072451,0.002081,0.013506,-0.761788,-0.030892,0.327923,-0.226852,0.267537,0.754189,-0.612527,0.030664,-0.076351,-0.263327,0.031984,-0.196741,0.963108,0.047869,0.097056,-8.551579,0.293061,0.331083},{-0.039521,0.413968,-0.026778,0.443643,-0.101383,-0.113250,-0.347728,-0.529167,-0.163139,0.127444,-0.225404,-0.179624,-0.088860,0.039728,0.533073,-2.084206,-0.805856,-1.365236,3.911538,0.055378,0.060236,0.043878,5.823513,-0.041718,0.217402,-0.821664,-0.153675,0.225944,-0.684990,-0.027748,-0.491161,-0.388331,-0.307660,-0.198475,0.614928,-0.597154,0.451179,0.676183,0.460208,-3.665094},{0.928747,-0.837697,0.173930,0.295179,0.567412,0.099594,-0.456655,0.368766,0.149009,0.396741,-0.671683,1.131766,-0.357549,0.346243,-0.110132,-0.035720,0.051116,-0.327937,-0.120046,0.064412,-0.071820,0.045032,-0.061899,0.028738,0.279131,-0.506246,-0.122542,0.106790,-1.017854,-0.033912,-0.136092,-0.027388,-0.191014,-0.175968,0.850571,0.046562,0.104960,-0.161293,0.687012,0.354321},{-0.124984,-0.923327,-0.169339,0.412903,-0.260212,-0.697227,-0.324919,1.458088,0.366438,0.710719,-1.498425,-0.276584,-0.010001,0.053005,0.982767,0.028398,-0.472422,-0.089079,-0.171838,0.040241,0.596555,0.118811,0.074745,-0.116126,-0.668552,0.020117,0.040030,0.676661,1.742595,-0.080826,-0.185977,-0.196433,-0.364671,-0.679199,0.240763,-0.586293,-6.677803,0.559337,-0.391475,0.272727},{-0.007410,-0.473459,-0.551744,0.064482,0.788155,0.058609,-0.061080,0.242706,-0.019387,0.555695,0.279340,0.453682,0.957166,0.310921,1.294396,-0.154691,-0.501355,-0.059700,0.784771,0.026270,0.383386,0.064058,-0.189567,-0.044978,-0.493368,0.553897,-0.359247,0.014928,0.623080,1.013159,0.076386,-0.357844,-0.298274,-0.165522,-0.626435,-0.148741,0.293543,0.172716,0.117787,0.334483},{-0.049182,-0.065134,-1.226466,0.047464,-0.347264,9.018711,-0.620437,-0.677771,-0.309711,1.026801,-0.008850,0.107837,0.730575,0.113730,0.620188,0.079186,-0.128754,-0.227806,-0.150784,-0.028216,0.304350,0.030251,-0.068265,-0.031549,-0.354259,0.140383,-0.239680,-0.000052,-0.211449,-0.019549,0.020439,-0.928812,-0.142287,-0.156692,1.219234,-0.102221,0.177695,0.217738,-0.551170,-0.084157},{-0.045442,0.691472,0.058573,0.479049,0.271450,-0.398280,-0.309101,0.546977,-1.536224,-0.115679,-0.165244,-0.545461,-0.594151,0.143027,0.331810,0.012434,-0.334638,0.003582,-0.013095,-0.010549,-8.005323,0.004458,0.148156,-0.040734,0.030494,0.090884,-0.494423,0.022798,-0.503950,-0.118773,-0.119750,0.013088,-0.051998,-0.193905,-0.657456,-0.004000,0.076924,0.439611,-0.647011,0.024055},{-0.092796,-0.402660,5.290063,0.599099,-0.516236,-1.073774,-1.015231,-0.515644,0.219872,-0.015424,-0.878169,1.213909,-0.799700,0.405378,0.367293,-0.004365,-0.935996,-0.612631,-0.610753,0.048027,0.812655,0.084903,-0.039923,-0.063562,0.120995,-0.352009,-0.414344,0.522084,0.752985,-0.053352,-0.889032,-0.674180,-0.415844,-0.577616,-0.206753,5.831082,0.717783,1.034251,0.207176,0.300124},{-0.012637,0.280643,-0.032624,0.179713,-0.800956,-0.363106,-0.047414,-0.581391,-1.310143,1.124265,0.101830,0.041672,-2.470852,0.389645,-1.770480,-0.228317,-0.244046,-0.068857,0.135392,0.015182,-0.147121,-0.011521,-0.085860,0.006848,-0.575756,0.101797,0.621371,0.224719,0.491936,0.019536,-0.135116,-0.175439,6.520049,-0.056506,0.168025,-0.193611,0.182090,0.306826,-0.036402,0.574312},{-0.038210,0.223917,-0.543629,-0.107348,-0.854029,0.307079,-0.051062,-0.372995,-0.424610,0.165605,-0.081275,-0.077514,-0.571951,0.440244,-0.391963,-0.081504,-0.160235,0.454355,2.017814,0.064284,0.051391,-0.005986,-1.484973,-0.011388,-0.006155,0.294405,0.277371,0.006574,-0.191889,0.019068,5.650165,-0.381291,-0.137484,-0.183527,0.051492,-0.189917,0.105934,0.328059,0.495539,2.576354},{-0.057161,-1.063691,-0.080598,0.160207,-0.177935,-0.368161,-0.397107,0.299847,-0.574520,0.508956,-1.049110,0.123347,-0.592889,0.000269,0.103327,-0.012492,-0.057436,-0.273380,0.116556,-0.007136,0.173386,-1.161772,-0.333147,-0.046347,0.121966,0.136358,-0.153685,0.080383,0.159194,-0.078421,-0.089132,0.027911,-0.129174,-0.165209,-0.769910,-0.198654,0.073231,0.305002,2.635519,-0.277125},{-0.046404,0.870483,0.078136,0.389906,-0.029383,-0.444360,8.569369,0.029098,-0.716183,0.260278,0.037912,0.043875,-0.464522,1.829785,-0.044041,0.016255,-0.196510,-0.316907,-0.475242,-0.002381,0.460101,0.051409,0.265212,-0.073901,0.468513,0.266990,0.189957,0.152803,0.387400,-0.028087,-0.183731,-0.046784,-0.169502,-0.047340,0.030669,-0.122793,0.131013,0.608427,-0.618695,-0.387531},{-0.024790,-0.655685,-0.086598,0.098746,-0.357025,-0.298045,-0.006057,0.140077,0.108239,-1.129781,-0.001870,0.429731,-0.128623,0.190129,-0.033885,-0.040244,-0.181583,-0.169979,0.374441,0.046880,0.036118,0.039529,0.056628,1.007103,0.345818,0.338473,-0.228686,0.171873,-0.076806,-0.051932,-0.058178,0.139182,-0.093298,-0.201499,-0.342320,-0.232053,0.071230,0.084720,-0.505584,0.322746},{0.035078,-0.239078,0.314090,-0.036607,-0.397013,-0.084174,0.072938,-0.341218,0.115192,0.190171,0.158220,-1.038212,-0.458305,0.390731,-0.488960,-0.346133,-0.255418,-0.663229,-0.099815,-0.006554,-0.100569,-0.036354,0.066739,0.049443,0.627198,-0.065800,0.088204,-6.205267,-0.751551,0.018206,-0.317689,0.155229,-0.143208,-0.084551,-0.223349,0.314614,0.016793,0.004042,-0.900213,0.240615},{0.022743,-0.327809,-0.477246,0.193635,-1.127696,-0.094116,-0.591619,-0.133164,-1.010260,0.123556,0.033227,-0.382056,-0.124200,-6.669055,-0.109534,-0.106305,-0.095454,-0.155828,-0.222391,-0.039187,0.110925,0.011541,0.161406,-0.053869,0.432326,0.450441,0.052491,0.083563,0.344917,-0.006607,-0.668264,-0.357333,0.060816,-0.078241,-0.342845,-0.029463,0.164913,0.015309,0.288372,0.158511},{-0.020758,0.171493,-0.077287,0.164092,-2.093815,-0.163060,-0.176555,0.129298,-0.578019,1.028753,-0.139018,0.044675,-0.126149,0.437916,-0.182981,-0.498978,-0.006867,7.565419,-1.721802,-0.025842,0.077230,0.008413,-0.023940,0.029494,-0.248149,-0.257183,-0.115629,0.447927,-0.565307,-0.006514,-0.186653,0.276876,0.044144,-0.072252,-0.581868,0.065849,-0.012336,0.206942,-0.239964,-1.194649}};
    double b1[] = {-4.841924,4.820622,-6.229349,4.771561,-7.038666,-7.309763,-7.806711,-6.295658,-7.661788,5.334213,-5.687647,-5.446669,-5.023821,8.131856,4.935073,-6.574737,-5.253475,-5.961736,-6.476897,5.082879,5.799079,6.921179,-5.909551,-5.323526,4.484561,4.597820,-7.530660,7.488663,-4.788638,-8.425789,-6.614195,-7.471958,-5.104527,-5.205343,5.790687,-5.208778,2.622022,5.875294,-5.943178,7.093806};
    double b2[] = {-0.372217,-1.019450,-0.745119,-2.011976,-0.353204,-1.261578,-0.249858,-0.536122,0.928709,0.745518,-0.049158,0.927178,-1.590608,-0.304423,-0.937861,-0.566935,0.435759,-1.491289,-0.933976,-1.376623,-0.778649,-0.385320,-1.023031,0.429412,0.016909,0.322104};

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_picture);
        imageView = (ImageView) findViewById(R.id.iv);
        Intent intent = getIntent();
        imageUri = intent.getParcelableExtra("imageUri");
        imageUriCopy = imageUri;
        if (imageUri != null) {
            ContentResolver resolver = getContentResolver();
            try {
                resizedBitmap = MediaStore.Images.Media.getBitmap(resolver, imageUri);
                imageView.setImageBitmap(resizedBitmap);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()){
            case R.id.crop:
                crop();
                break;
            case R.id.rotate:
                rotate();
                break;
            case R.id.done:
                //int width = resizedBitmap.getWidth();
                //int height = resizedBitmap.getHeight();
                //float shrinkscale = 1;
                //if (width*height>491520) {
                //    shrinkscale = (float) Math.sqrt(491520.0/(width*height));
                //}
                //Matrix matrix = new Matrix();
                //matrix.postScale(shrinkscale, shrinkscale);
                //resizedBitmap = Bitmap.createBitmap(resizedBitmap, 0, 0,width,height,matrix,true);
                width = resizedBitmap.getWidth();
                height = resizedBitmap.getHeight();
                binaryzation();
                break;
        }
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case ALTER_PHOTO:
                if (resultCode == RESULT_OK) {
                    if (imageUri != null) {
                        ContentResolver resolver = getContentResolver();
                        try {
                            resizedBitmap = MediaStore.Images.Media.getBitmap(resolver, imageUri);
                            imageView.setImageBitmap(resizedBitmap);
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    } else ;
                }
                break;
        }
    }

    public void crop() {
        Intent intent = new Intent("com.android.camera.action.CROP");
        intent.setDataAndType(imageUriCopy, "image/*");
        intent.putExtra("crop", "true");
        File file = new File(mFilePath);
        imageUri = Uri.fromFile(file);
        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
        intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
        intent.putExtra("scale", false);
        intent.putExtra("return-data", false);
        startActivityForResult(intent, ALTER_PHOTO);
    }

    public void rotate() {
        rotateCount = (rotateCount+1)%4;
        if (imageUri != null) {
            ContentResolver resolver = getContentResolver();
            try {
                resizedBitmap = MediaStore.Images.Media.getBitmap(resolver, imageUri);
                Matrix matrix = new Matrix();
                matrix.postRotate(90*rotateCount);
                resizedBitmap = Bitmap.createBitmap(resizedBitmap, 0, 0,
                        resizedBitmap.getWidth(), resizedBitmap.getHeight(), matrix, true);
                imageView.setImageBitmap(resizedBitmap);
                matrix = null;
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void binaryzation() {
        english = "";
        int[][] sum = new int[width][height];
        int[][] gray = new int[width][height];
        int[] pix = new int[width * height];
        resizedBitmap.getPixels(pix, 0, width, 0, 0, width, height);
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int x = j * width + i;
                int r = (pix[x] >> 16) & 0xff;
                int g = (pix[x] >> 8) & 0xff;
                int b = pix[x] & 0xff;
                gray[i][j] = (int) (0.3 * r + 0.59 * g + 0.11 * b);
            }
        }
        //pix = null;
        double t = 15;
        int s = Math.min(width/8,height/8);
        sum[0][0] = gray[0][0];
        for (int i = 1; i < width; i++) {
            sum[i][0] = sum[i-1][0]+gray[i][0];
        }
        for (int j = 1; j < height; j++) {
            sum[0][j] = sum[0][j-1]+gray[0][j];
        }
        for (int i = 1; i < width; i++) {
            for (int j = 1; j < height; j++) {
                sum[i][j] = gray[i][j]+sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1];
            }
        }
        int[] sumrow = new int[height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int x1 = i - s/2; x1 = x1>0?x1:0;
                int y1 = j - s/2; y1 = y1>0?y1:0;
                int x2 = i + s/2; x2 = x2<width?x2:width-1;
                int y2 = j + s/2; y2 = y2<height?y2:height-1;
                int area = (x2-x1+1)*(y2-y1+1);

                double rectsum;
                if (x1>0 && y1>0) {
                    rectsum = sum[x2][y2]-sum[x2][y1-1]-sum[x1-1][y2]+sum[x1-1][y1-1];}
                else if (x1==0 && y1>0) {
                    rectsum = sum[x2][y2]-sum[x2][y1-1];}
                else if (x1>0 && y1==0){
                    rectsum = sum[x2][y2]-sum[x1-1][y2];}
                else {
                    rectsum = sum[x2][y2];
                }
                if ((double)gray[i][j]*area <= rectsum*(1.0 - t/100.0)) {
                    gray[i][j] = 1;
                    sumrow[j]++;
                } else {
                    gray[i][j] = 0;
                }
            }
        }

        /*
        //防止出现黑底白字
        for (int m = 0; m < height; m++) {
            if (sumrow[m] >= 0.85*width) {
                for (int i = 0; i < width; i++) {
                    for (int j = 0; j < height; j++) {
                        gray[i][j] = 1 - gray[i][j];
                    }
                }
                for (int n = 0; n < height; n++) {
                    sumrow[n] = width-sumrow[n];
                }
                break;
            }
        }*/
        //character_segmentation
        for (int j = 0; j < height; j++) {
            if (sumrow[j] >= 0.01*width)
                sumrow[j] = 1;
            else sumrow[j] = 0;
        }
        int beginrow = 0; //防止出现第一行只有一半
        for (int j = 0; j < height-1; j++) {
            if (sumrow[j]==0 && sumrow[j+1]==1) {
                beginrow = j;
                break;
            }
        }
        int []begin_end = new int[height];
        int count = 0;
        for (int j = beginrow; j < height-1; j++) {
            if (sumrow[j] + sumrow[j+1] == 1) {
                begin_end[count] = j;
                count = count + 1;
            }
        }
        count = count/2; //防止出现最后一行只有一半

        Stack<Point> stack = new Stack<Point>();
        char[][] flag = new char [width][height];
        Stack<Rect> rect = new Stack<Rect>();
        int[] letterrowcount = new int[count];
        for (int m=0; m< count; m++) {
            for (int n = 0; n < width; n++) {
                for (int p=begin_end[2*m]; p<begin_end[2*m+1]; p++) {
                    if (gray[n][p]==1 && flag[n][p]==0) {
                        Point point = new Point(n,p);
                        stack.add(point);
                        point = null;
                        flag[n][p] = 1;
                        int minrow = p; int mincolumn = n;
                        int maxrow = p; int maxcolumn = n;
                        while(!stack.empty()) {
                            Point top = stack.pop();
                            int x = top.getX(); int y = top.getY();

                            minrow = minrow > y? y: minrow;
                            mincolumn = mincolumn > x? x: mincolumn;
                            maxrow = maxrow < y? y: maxrow;
                            maxcolumn = maxcolumn < x? x: maxcolumn;

                            int[][] neighbor = new int[4][2];
                            neighbor[0][0] = x; neighbor[0][1] = neighbor[0][1] = y>0? y-1:0;
                            neighbor[1][0] = x; neighbor[1][1] =y<height-1?y+1:height-1;
                            neighbor[2][0] = x>0?x-1:0; neighbor[2][1] = y;
                            neighbor[3][0] = x<width-1?x+1:width-1; neighbor[3][1] = y;
                            for (int q=0; q<4; q++) {
                                if (gray[neighbor[q][0]][neighbor[q][1]]==1 && flag[neighbor[q][0]][neighbor[q][1]]==0) {
                                    Point point1 = new Point(neighbor[q][0],neighbor[q][1]);
                                    stack.add(point1);
                                    flag[neighbor[q][0]][neighbor[q][1]]=1;
                                }
                            }
                            neighbor = null;
                        }
                        if ((maxcolumn-mincolumn)*(maxrow-minrow)>=9) {
                            Rect rect1 = new Rect(mincolumn,minrow,maxcolumn,maxrow);
                            rect.add(rect1);
                            rect1 = null;
                            letterrowcount[m]++;
                        }
                    }
                }
            }
        }
        flag = null;
        int beginIndex = 0;
        for (int i=0; i<count; i++){
            if (i>0) {
                beginIndex = beginIndex + letterrowcount[i-1];
            }
            //合并连通域
            for (int j=0; j<letterrowcount[i]-1; j++) {
                Rect rect1 = rect.get(beginIndex+j);
                Rect rect2 = rect.get(beginIndex+j+1);
                if (rect1.gety1()>rect2.gety1()) {
                    Rect temp; temp = rect1; rect1 = rect2; rect2 = temp;
                }
                int middle = (rect1.getx2()+rect1.getx1())/2;
                if (rect1.gety2()<rect2.gety1() && middle>=rect2.getx1() && middle<=rect2.getx2()) {
                    rect1.setRect(Math.min(rect1.getx1(),rect2.getx1()),Math.min(rect1.gety1(),rect2.gety1()),
                            Math.max(rect1.getx2(),rect2.getx2()),Math.max(rect1.gety2(),rect2.gety2()));
                    rect.set(beginIndex+j,rect1);
                    rect.remove(beginIndex+j+1);
                    letterrowcount[i]--;
                }
            }
        }

        beginIndex = 0;
        String letter = "abcdefghijklmnopqrstuvwxyz";

        for (int i=0; i<count; i++) {
            if (i > 0) {
                beginIndex = beginIndex + letterrowcount[i - 1];
            }
            for (int j = 0; j < letterrowcount[i]; j++) {
                Rect rect1 = rect.get(beginIndex + j);
                int mincolumn = rect1.getx1(); int minrow = rect1.gety1();
                int maxcolumn = rect1.getx2(); int maxrow = rect1.gety2();
                int columnScale = maxcolumn-mincolumn+1;  int rowScale = maxrow-minrow+1;
                int maxscale = Math.max(rowScale,columnScale);
                if (columnScale>(begin_end[2*i+1]-begin_end[2*i])*0.3 || rowScale>(begin_end[2*i+1]-begin_end[2*i])*0.3) {
                    int[][] newgray = new int[maxscale][maxscale];
                    if (rowScale == columnScale) ;
                    else if (rowScale>columnScale) {
                        int beginCopyPosition = (int)(rowScale/2.0-columnScale/2.0);
                        for (int m=beginCopyPosition; m<beginCopyPosition+columnScale; m++) {
                            for (int n=0; n<rowScale; n++) {
                                newgray[m][n] = gray[m+mincolumn-beginCopyPosition][n+minrow];
                            }
                        }
                    }
                    else {
                        int beginCopyPosition = (int)(columnScale/2.0-rowScale/2.0);
                        for (int m=0; m<columnScale; m++) {
                            for (int n=beginCopyPosition; n<beginCopyPosition+rowScale; n++) {
                                newgray[m][n] = gray[m+mincolumn][n+minrow-beginCopyPosition];
                            }
                        }
                    }
                    int[][] feature = new int[28][28];
                    for (int m=0; m<28; m++) {
                        for (int n=0; n<28; n++) {
                            int x = (int)(n*maxscale*1.0)/28;
                            int y = (int)(m*maxscale*1.0)/28;
                            feature[n][m] = newgray[x][y];
                        }
                    }
                    double[] input = new double[49];
                    double maxinput = 0;
                    double mininput = 0;
                    for (int k=0; k<7; k++) {
                        for (int m=0; m<7; m++) {
                            double temp = 0;
                            for (int p=m*4; p<m*4+4; p++) {
                                for (int q=k*4; q<k*4+4; q++) {
                                    temp += feature[p][q];
                                }
                            }
                            input[k*7+m] = temp/16;
                            if (input[k*7+m] > maxinput) {
                                maxinput = input[k*7+m];
                            }
                            if (input[k*7+m] < mininput) {
                                mininput = input[k*7+m];
                            }
                        }
                    }
                    for (int p=0; p<49; p++) {
                        input[p] = (input[p]-mininput)/(maxinput-mininput)*2-1;
                    }
                    double[] x1 = new double[40];
                    double[] y = new double[26];

                    for (int p=0; p<40; p++) {
                        double temp = 0;
                        for (int q=0; q<49; q++) {
                            temp = temp + w1[p][q]*input[q];
                        }
                        x1[p] = 2/(1+Math.exp(-2*(temp + b1[p])))-1;
                    }
                    for (int p=0; p<26; p++) {
                        for (int q=0; q<40; q++) {
                            y[p] = y[p] + w2[p][q]*x1[q];
                        }
                        y[p] = y[p] + b2[p];
                    }
                    int letterPosition = 0;
                    for (int h=1; h<26; h++) {
                        if (y[h] > y[letterPosition]) {
                            letterPosition = h;
                        }
                    }
                    english += letter.charAt(letterPosition);
                } else {
                    rect.remove(beginIndex+j);
                    letterrowcount[i]--;
                    j--;
                }

                //识别空格
                if (j==(letterrowcount[i]-1)) ;
                else {
                    Rect rect3 = rect.get(beginIndex + j);
                    Rect rect2 = rect.get(beginIndex + j+1);
                    if (rect3.getx2()>rect2.getx2()) {
                        Rect temp; temp = rect3; rect3 = rect2; rect2 = temp;
                    }
                    //double distanceScale = (rect2.getx1()-rect3.getx2())/(begin_end[2*i+1]-begin_end[2*i]);
                    double distanceScale = (rect2.getx1()-rect3.getx2())*1.0/(rect3.gety2()-rect3.gety1());
                    if (distanceScale > 0.3) {
                        english = english + ' ';
                    }
                }
            }
            english = english + '\n';
        }
        for (int m=0; m<rect.size(); m++) {
            Rect rect1 = rect.get(m);
            int mincolumn = rect1.getx1(); int minrow = rect1.gety1();
            int maxcolumn = rect1.getx2(); int maxrow = rect1.gety2();

            for (int i=minrow; i<=maxrow; i++) {
                pix[i*width+mincolumn] = Color.rgb(255, 0, 0);
                pix[i*width+maxcolumn] = Color.rgb(255, 0, 0);
            }
            for (int j=mincolumn; j<=maxcolumn; j++) {
                pix[minrow*width+j] = Color.rgb(255, 0, 0);
                pix[maxrow*width+j] = Color.rgb(255, 0, 0);
            }
        }
        resizedBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        resizedBitmap.setPixels(pix, 0, width, 0, 0, width, height);
        imageView.setImageBitmap(resizedBitmap);
        //pix = null;
        Intent intent = new Intent(PictureActivity.this,TranslateActivity.class);
        intent.putExtra("english", english);
        startActivity(intent);
    }

}